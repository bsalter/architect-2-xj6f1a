name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ '*' ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install frontend dependencies
        run: cd frontend && npm ci
        
      - name: Lint frontend
        run: cd frontend && npm run lint
        
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
          
      - name: Install backend dependencies
        run: cd backend && pip install -r requirements.txt
        
      - name: Lint backend
        run: cd backend && pylint --rcfile=.pylintrc ./**/*.py

  test:
    name: Test
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install frontend dependencies
        run: cd frontend && npm ci
        
      - name: Run frontend tests with coverage
        run: cd frontend && npm test -- --coverage
        
      - name: Check frontend code coverage
        run: |
          cd frontend
          COVERAGE=$(npm test -- --coverage --coverageReporters="text-summary" | grep "All files" | awk '{print $4}' | tr -d '%')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Code coverage is below 80%: $COVERAGE%"
            exit 1
          fi
        
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
          
      - name: Set up PostgreSQL
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: '15'
          postgresql db: 'test_db'
          postgresql user: 'test_user'
          postgresql password: 'test_password'
          
      - name: Install backend dependencies
        run: cd backend && pip install -r requirements.txt
        
      - name: Run backend tests with coverage
        run: |
          cd backend
          pytest --cov=. --cov-report=term --cov-fail-under=80 tests/

  static-analysis:
    name: Static Analysis
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of SonarQube analysis
        
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-scan:
    name: Build and Scan
    needs: [test, static-analysis]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Build frontend image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: false
          load: true
          tags: interaction-frontend:${{ github.sha }}
          
      - name: Build backend image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: false
          load: true
          tags: interaction-backend:${{ github.sha }}
          
      - name: Scan frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: interaction-frontend:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
      - name: Scan backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: interaction-backend:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
      - name: Login to container registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Push frontend image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/interaction-frontend:${{ github.sha }}
          
      - name: Push backend image
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY }}/interaction-backend:${{ github.sha }}