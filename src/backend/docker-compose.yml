version: "3.8"

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - DATABASE_URI=postgresql://postgres:postgres@db:5432/interaction_management
      - DATABASE_HOST=db
      - DATABASE_PORT=5432
      - DATABASE_NAME=interaction_management
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=dev-secret-key-change-in-production
      - JWT_SECRET_KEY=dev-jwt-secret-key-change-in-production
      - JWT_ACCESS_TOKEN_EXPIRES=86400
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173
      - SITE_COOKIE_NAME=site_id
      - DEFAULT_SITE_ID=1
    depends_on:
      - db
      - redis
    command: flask run --host=0.0.0.0
    restart: unless-stopped
    networks:
      - backend_network

  db:
    image: postgres:15.3
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=interaction_management
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d interaction_management"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - backend_network

  redis:
    image: redis:7.0.12-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - backend_network

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8080:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - backend_network

volumes:
  postgres_data:
    # Persistent storage for PostgreSQL data
  redis_data:
    # Persistent storage for Redis data

networks:
  backend_network:
    # Internal network for backend service communication